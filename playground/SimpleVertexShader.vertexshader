#version 450 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 MV; // For the lighting

// Output variables
out vec3 fNormal;
out vec3 fPosition;
out vec3 fLight;

out vec3 coordinate;

void main() {
	
	// Transform position and normal to camera space fragment shader for lighting 
	vec4 positionHom = MV * vec4(vertexPosition_modelspace,1.0);
	fPosition = positionHom.xyz;
	mat4 normalMatix = transpose(inverse(MV));
	vec4 normalHom = normalMatix * vec4(vertexNormal_modelspace,1.0);
	fNormal = normalHom.xyz;
	vec4 lightHom = normalMatix * vec4(4.0,4.0,4.0,1.0);
	fLight = lightHom.xyz;

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);

	coordinate = vertexPosition_modelspace;
}

